// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/sdk/sdk.go

// Package msdk is a generated GoMock package.
package msdk

import (
	gomock "github.com/golang/mock/gomock"
	sdk "github.com/tinywell/fabclient/pkg/sdk"
	reflect "reflect"
)

// MockTxHandler is a mock of TxHandler interface
type MockTxHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTxHandlerMockRecorder
}

// MockTxHandlerMockRecorder is the mock recorder for MockTxHandler
type MockTxHandlerMockRecorder struct {
	mock *MockTxHandler
}

// NewMockTxHandler creates a new mock instance
func NewMockTxHandler(ctrl *gomock.Controller) *MockTxHandler {
	mock := &MockTxHandler{ctrl: ctrl}
	mock.recorder = &MockTxHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxHandler) EXPECT() *MockTxHandlerMockRecorder {
	return m.recorder
}

// Excute mocks base method
func (m *MockTxHandler) Excute(channel, chaincode, fcn string, args [][]byte) sdk.RspMsg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Excute", channel, chaincode, fcn, args)
	ret0, _ := ret[0].(sdk.RspMsg)
	return ret0
}

// Excute indicates an expected call of Excute
func (mr *MockTxHandlerMockRecorder) Excute(channel, chaincode, fcn, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Excute", reflect.TypeOf((*MockTxHandler)(nil).Excute), channel, chaincode, fcn, args)
}

// Query mocks base method
func (m *MockTxHandler) Query(channel, chaincode, fcn string, args [][]byte) sdk.RspMsg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", channel, chaincode, fcn, args)
	ret0, _ := ret[0].(sdk.RspMsg)
	return ret0
}

// Query indicates an expected call of Query
func (mr *MockTxHandlerMockRecorder) Query(channel, chaincode, fcn, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockTxHandler)(nil).Query), channel, chaincode, fcn, args)
}

// RegisterEvent mocks base method
func (m *MockTxHandler) RegisterEvent(channel, ccName, event string) (<-chan *sdk.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEvent", channel, ccName, event)
	ret0, _ := ret[0].(<-chan *sdk.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEvent indicates an expected call of RegisterEvent
func (mr *MockTxHandlerMockRecorder) RegisterEvent(channel, ccName, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEvent", reflect.TypeOf((*MockTxHandler)(nil).RegisterEvent), channel, ccName, event)
}

// UnRegisterEvent mocks base method
func (m *MockTxHandler) UnRegisterEvent(channel, ccName, event string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnRegisterEvent", channel, ccName, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnRegisterEvent indicates an expected call of UnRegisterEvent
func (mr *MockTxHandlerMockRecorder) UnRegisterEvent(channel, ccName, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRegisterEvent", reflect.TypeOf((*MockTxHandler)(nil).UnRegisterEvent), channel, ccName, event)
}

// MockResourceManager is a mock of ResourceManager interface
type MockResourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockResourceManagerMockRecorder
}

// MockResourceManagerMockRecorder is the mock recorder for MockResourceManager
type MockResourceManagerMockRecorder struct {
	mock *MockResourceManager
}

// NewMockResourceManager creates a new mock instance
func NewMockResourceManager(ctrl *gomock.Controller) *MockResourceManager {
	mock := &MockResourceManager{ctrl: ctrl}
	mock.recorder = &MockResourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceManager) EXPECT() *MockResourceManagerMockRecorder {
	return m.recorder
}

// CreateChannel mocks base method
func (m *MockResourceManager) CreateChannel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateChannel")
}

// CreateChannel indicates an expected call of CreateChannel
func (mr *MockResourceManagerMockRecorder) CreateChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockResourceManager)(nil).CreateChannel))
}

// UpdateChannel mocks base method
func (m *MockResourceManager) UpdateChannel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateChannel")
}

// UpdateChannel indicates an expected call of UpdateChannel
func (mr *MockResourceManagerMockRecorder) UpdateChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockResourceManager)(nil).UpdateChannel))
}

// JoinChannel mocks base method
func (m *MockResourceManager) JoinChannel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JoinChannel")
}

// JoinChannel indicates an expected call of JoinChannel
func (mr *MockResourceManagerMockRecorder) JoinChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChannel", reflect.TypeOf((*MockResourceManager)(nil).JoinChannel))
}

// InstallChaincode mocks base method
func (m *MockResourceManager) InstallChaincode() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InstallChaincode")
}

// InstallChaincode indicates an expected call of InstallChaincode
func (mr *MockResourceManagerMockRecorder) InstallChaincode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallChaincode", reflect.TypeOf((*MockResourceManager)(nil).InstallChaincode))
}

// InstantiateChaincode mocks base method
func (m *MockResourceManager) InstantiateChaincode() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InstantiateChaincode")
}

// InstantiateChaincode indicates an expected call of InstantiateChaincode
func (mr *MockResourceManagerMockRecorder) InstantiateChaincode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstantiateChaincode", reflect.TypeOf((*MockResourceManager)(nil).InstantiateChaincode))
}

// UpgradeChaincode mocks base method
func (m *MockResourceManager) UpgradeChaincode() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpgradeChaincode")
}

// UpgradeChaincode indicates an expected call of UpgradeChaincode
func (mr *MockResourceManagerMockRecorder) UpgradeChaincode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeChaincode", reflect.TypeOf((*MockResourceManager)(nil).UpgradeChaincode))
}

// QueryBlock mocks base method
func (m *MockResourceManager) QueryBlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QueryBlock")
}

// QueryBlock indicates an expected call of QueryBlock
func (mr *MockResourceManagerMockRecorder) QueryBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBlock", reflect.TypeOf((*MockResourceManager)(nil).QueryBlock))
}

// QueryFirstBlock mocks base method
func (m *MockResourceManager) QueryFirstBlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QueryFirstBlock")
}

// QueryFirstBlock indicates an expected call of QueryFirstBlock
func (mr *MockResourceManagerMockRecorder) QueryFirstBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFirstBlock", reflect.TypeOf((*MockResourceManager)(nil).QueryFirstBlock))
}

// QueryConfigBlock mocks base method
func (m *MockResourceManager) QueryConfigBlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QueryConfigBlock")
}

// QueryConfigBlock indicates an expected call of QueryConfigBlock
func (mr *MockResourceManagerMockRecorder) QueryConfigBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryConfigBlock", reflect.TypeOf((*MockResourceManager)(nil).QueryConfigBlock))
}

// QueryChainInfo mocks base method
func (m *MockResourceManager) QueryChainInfo() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QueryChainInfo")
}

// QueryChainInfo indicates an expected call of QueryChainInfo
func (mr *MockResourceManagerMockRecorder) QueryChainInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryChainInfo", reflect.TypeOf((*MockResourceManager)(nil).QueryChainInfo))
}

// MockLedgerQueryer is a mock of LedgerQueryer interface
type MockLedgerQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerQueryerMockRecorder
}

// MockLedgerQueryerMockRecorder is the mock recorder for MockLedgerQueryer
type MockLedgerQueryerMockRecorder struct {
	mock *MockLedgerQueryer
}

// NewMockLedgerQueryer creates a new mock instance
func NewMockLedgerQueryer(ctrl *gomock.Controller) *MockLedgerQueryer {
	mock := &MockLedgerQueryer{ctrl: ctrl}
	mock.recorder = &MockLedgerQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLedgerQueryer) EXPECT() *MockLedgerQueryerMockRecorder {
	return m.recorder
}

// QueryBlock mocks base method
func (m *MockLedgerQueryer) QueryBlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QueryBlock")
}

// QueryBlock indicates an expected call of QueryBlock
func (mr *MockLedgerQueryerMockRecorder) QueryBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBlock", reflect.TypeOf((*MockLedgerQueryer)(nil).QueryBlock))
}

// QueryFirstBlock mocks base method
func (m *MockLedgerQueryer) QueryFirstBlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QueryFirstBlock")
}

// QueryFirstBlock indicates an expected call of QueryFirstBlock
func (mr *MockLedgerQueryerMockRecorder) QueryFirstBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFirstBlock", reflect.TypeOf((*MockLedgerQueryer)(nil).QueryFirstBlock))
}

// QueryConfigBlock mocks base method
func (m *MockLedgerQueryer) QueryConfigBlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QueryConfigBlock")
}

// QueryConfigBlock indicates an expected call of QueryConfigBlock
func (mr *MockLedgerQueryerMockRecorder) QueryConfigBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryConfigBlock", reflect.TypeOf((*MockLedgerQueryer)(nil).QueryConfigBlock))
}

// QueryChainInfo mocks base method
func (m *MockLedgerQueryer) QueryChainInfo() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QueryChainInfo")
}

// QueryChainInfo indicates an expected call of QueryChainInfo
func (mr *MockLedgerQueryerMockRecorder) QueryChainInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryChainInfo", reflect.TypeOf((*MockLedgerQueryer)(nil).QueryChainInfo))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/handler/handler.go

// Package mhandler is a generated GoMock package.
package mhandler

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	handler "github.com/tinywell/fabclient/pkg/handler"
	sdk "github.com/tinywell/fabclient/pkg/sdk"
	reflect "reflect"
)

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// HandleMessage mocks base method
func (m *MockHandler) HandleMessage(ctx context.Context, msg handler.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleMessage", ctx, msg)
}

// HandleMessage indicates an expected call of HandleMessage
func (mr *MockHandlerMockRecorder) HandleMessage(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockHandler)(nil).HandleMessage), ctx, msg)
}

// RegisterEvent mocks base method
func (m *MockHandler) RegisterEvent() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEvent")
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterEvent indicates an expected call of RegisterEvent
func (mr *MockHandlerMockRecorder) RegisterEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEvent", reflect.TypeOf((*MockHandler)(nil).RegisterEvent))
}

// GetEvent mocks base method
func (m *MockHandler) GetEvent() <-chan sdk.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent")
	ret0, _ := ret[0].(<-chan sdk.Event)
	return ret0
}

// GetEvent indicates an expected call of GetEvent
func (mr *MockHandlerMockRecorder) GetEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockHandler)(nil).GetEvent))
}

// FillHandlerFunc mocks base method
func (m *MockHandler) FillHandlerFunc(box handler.FuncBox) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FillHandlerFunc", box)
	ret0, _ := ret[0].(error)
	return ret0
}

// FillHandlerFunc indicates an expected call of FillHandlerFunc
func (mr *MockHandlerMockRecorder) FillHandlerFunc(box interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillHandlerFunc", reflect.TypeOf((*MockHandler)(nil).FillHandlerFunc), box)
}

// MockFuncBox is a mock of FuncBox interface
type MockFuncBox struct {
	ctrl     *gomock.Controller
	recorder *MockFuncBoxMockRecorder
}

// MockFuncBoxMockRecorder is the mock recorder for MockFuncBox
type MockFuncBoxMockRecorder struct {
	mock *MockFuncBox
}

// NewMockFuncBox creates a new mock instance
func NewMockFuncBox(ctrl *gomock.Controller) *MockFuncBox {
	mock := &MockFuncBox{ctrl: ctrl}
	mock.recorder = &MockFuncBoxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFuncBox) EXPECT() *MockFuncBoxMockRecorder {
	return m.recorder
}

// OpenTxHandlerBox mocks base method
func (m *MockFuncBox) OpenTxHandlerBox() map[handler.TranCode]handler.TxHandleFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenTxHandlerBox")
	ret0, _ := ret[0].(map[handler.TranCode]handler.TxHandleFunc)
	return ret0
}

// OpenTxHandlerBox indicates an expected call of OpenTxHandlerBox
func (mr *MockFuncBoxMockRecorder) OpenTxHandlerBox() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenTxHandlerBox", reflect.TypeOf((*MockFuncBox)(nil).OpenTxHandlerBox))
}

// OpenSrcHandlerBox mocks base method
func (m *MockFuncBox) OpenSrcHandlerBox() map[handler.TranCode]handler.SrcHandleFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSrcHandlerBox")
	ret0, _ := ret[0].(map[handler.TranCode]handler.SrcHandleFunc)
	return ret0
}

// OpenSrcHandlerBox indicates an expected call of OpenSrcHandlerBox
func (mr *MockFuncBoxMockRecorder) OpenSrcHandlerBox() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSrcHandlerBox", reflect.TypeOf((*MockFuncBox)(nil).OpenSrcHandlerBox))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/server/server.go

// Package mserver is a generated GoMock package.
package mserver

import (
	gomock "github.com/golang/mock/gomock"
	handler "github.com/tinywell/fabclient/pkg/handler"
	sdk "github.com/tinywell/fabclient/pkg/sdk"
	reflect "reflect"
)

// MockServer is a mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// ReceiveMessage mocks base method
func (m *MockServer) ReceiveMessage() <-chan handler.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMessage")
	ret0, _ := ret[0].(<-chan handler.Message)
	return ret0
}

// ReceiveMessage indicates an expected call of ReceiveMessage
func (mr *MockServerMockRecorder) ReceiveMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessage", reflect.TypeOf((*MockServer)(nil).ReceiveMessage))
}

// HandleEvent mocks base method
func (m *MockServer) HandleEvent(event sdk.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleEvent", event)
}

// HandleEvent indicates an expected call of HandleEvent
func (mr *MockServerMockRecorder) HandleEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockServer)(nil).HandleEvent), event)
}
